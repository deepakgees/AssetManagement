generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id              Int                 @id @default(autoincrement())
  name            String
  apiKey          String?
  lastSync        DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  userId          String?
  password        String?
  apiSecret       String?
  family          String?
  accessToken     String?
  refreshToken    String?
  description     String?
  isActive        Boolean             @default(true)
  requestToken    String?
  totpSecret      String?
  dividendUploads DividendUpload[]
  holdings        Holding[]
  margins         Margin[]
  pnlUploads      PnLUpload[]
  snapshots       PortfolioSnapshot[]
  positions       Position[]
  fundTransactions FundTransaction[]

  @@map("accounts")
}

model Holding {
  id                 Int      @id @default(autoincrement())
  tradingSymbol      String
  quantity           Int
  averagePrice       Float
  lastPrice          Float
  marketValue        Float
  pnl                Float
  pnlPercentage      Float
  exchange           String
  sector             String?
  accountId          Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  instrumentToken    Int?
  isin               String?
  product            String?
  collateralQuantity Int?
  collateralType     String?
  t1Quantity         Int?
  realisedQuantity   Int?
  account            Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("holdings")
}

model Position {
  id            Int      @id @default(autoincrement())
  tradingSymbol String
  quantity      Int
  averagePrice  Float
  lastPrice     Float
  marketValue   Float
  pnl           Float
  pnlPercentage Float
  exchange      String
  product       String
  side          String
  accountId     Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  account       Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("positions")
}

model PortfolioSnapshot {
  id                 Int      @id @default(autoincrement())
  totalValue         Float
  totalPnL           Float
  totalPnLPercentage Float
  cashBalance        Float
  marginUsed         Float
  availableMargin    Float
  accountId          Int
  createdAt          DateTime @default(now())
  account            Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("portfolio_snapshots")
}

model Margin {
  id               Int      @id @default(autoincrement())
  accountId        Int
  segment          String
  enabled          Boolean
  net              Float
  debits           Float
  payout           Float
  liquidCollateral Float
  stockCollateral  Float
  span             Float
  exposure         Float
  additional       Float
  delivery         Float
  optionPremium    Float
  holdingSales     Float
  turnover         Float
  equity           Float
  m2mRealised      Float
  m2mUnrealised    Float
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  account          Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("margins")
}

model PnLUpload {
  id         Int         @id @default(autoincrement())
  accountId  Int
  fileName   String
  uploadDate DateTime    @default(now())
  status     String      @default("processing")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  records    PnLRecord[]
  account    Account     @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("pnl_uploads")
}

model PnLRecord {
  id                         Int       @id @default(autoincrement())
  uploadId                   Int
  instrumentType             String
  symbol                     String?
  isin                       String?
  entryDate                  DateTime?
  exitDate                   DateTime?
  quantity                   Float?
  buyValue                   Float?
  sellValue                  Float?
  profit                     Float?
  periodOfHolding            String?
  fairMarketValue            Float?
  taxableProfit              Float?
  turnover                   Float?
  brokerage                  Float?
  exchangeTransactionCharges Float?
  ipft                       Float?
  sebiCharges                Float?
  cgst                       Float?
  sgst                       Float?
  igst                       Float?
  stampDuty                  Float?
  stt                        Float?
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
  upload                     PnLUpload @relation(fields: [uploadId], references: [id], onDelete: Cascade)

  @@map("pnl_records")
}

model DividendUpload {
  id         Int              @id @default(autoincrement())
  accountId  Int
  fileName   String
  uploadDate DateTime         @default(now())
  status     String           @default("processing")
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  records    DividendRecord[]
  account    Account          @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("dividend_uploads")
}

model DividendRecord {
  id                Int            @id @default(autoincrement())
  uploadId          Int
  symbol            String?
  isin              String?
  exDate            DateTime?
  quantity          Float?
  dividendPerShare  Float?
  netDividendAmount Float?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  upload            DividendUpload @relation(fields: [uploadId], references: [id], onDelete: Cascade)

  @@unique([uploadId, symbol, isin, exDate, quantity, dividendPerShare, netDividendAmount], name: "unique_dividend_record")
  @@map("dividend_records")
}

model SymbolAndMargin {
  id            Int      @id @default(autoincrement())
  symbolPrefix  String
  margin        Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([symbolPrefix], name: "unique_symbol_prefix")
  @@map("symbol_and_margins")
}

model FundTransaction {
  id          Int      @id @default(autoincrement())
  accountId   Int
  transactionDate DateTime
  amount      Float
  type        String   // 'ADDITION' or 'WITHDRAWAL'
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("fund_transactions")
}
