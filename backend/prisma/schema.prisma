generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]

  @@map("users")
}

model Account {
  id          Int      @id @default(autoincrement())
  name        String
  family      String?
  apiKey      String
  apiSecret   String
  accessToken String?
  refreshToken String?
  requestToken String?
  description String?
  isActive    Boolean  @default(true)
  lastSync    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  positions   Position[]
  holdings    Holding[]
  snapshots   PortfolioSnapshot[]
  margins     Margin[]
  pnlUploads  PnLUpload[]
  dividendUploads DividendUpload[]

  @@map("accounts")
}

model Holding {
  id                 Int      @id @default(autoincrement())
  tradingSymbol      String
  quantity           Int
  averagePrice       Float
  lastPrice          Float
  marketValue        Float
  pnl                Float
  pnlPercentage      Float
  exchange           String
  sector             String?
  accountId          Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  instrumentToken    Int?
  isin               String?
  product            String?
  collateralQuantity Int?
  collateralType     String?
  t1Quantity         Int?
  realisedQuantity   Int?
  account            Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("holdings")
}

model Position {
  id            Int      @id @default(autoincrement())
  tradingSymbol String
  quantity      Int
  averagePrice  Float
  lastPrice     Float
  marketValue   Float
  pnl           Float
  pnlPercentage Float
  exchange      String
  product       String
  side          String
  accountId     Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  account       Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("positions")
}

model PortfolioSnapshot {
  id                 Int      @id @default(autoincrement())
  totalValue         Float
  totalPnL           Float
  totalPnLPercentage Float
  cashBalance        Float
  marginUsed         Float
  availableMargin    Float
  accountId          Int
  createdAt          DateTime @default(now())
  account            Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("portfolio_snapshots")
}

model Margin {
  id                Int      @id @default(autoincrement())
  accountId         Int
  segment           String
  enabled           Boolean
  net               Float
  debits            Float
  payout            Float
  liquidCollateral  Float
  stockCollateral   Float
  span              Float
  exposure          Float
  additional        Float
  delivery          Float
  optionPremium     Float
  holdingSales      Float
  turnover          Float
  equity            Float
  m2mRealised       Float
  m2mUnrealised     Float
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  account           Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("margins")
}

model PnLUpload {
  id        Int      @id @default(autoincrement())
  accountId Int
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  fileName  String
  uploadDate DateTime @default(now())
  status    String   @default("processing") // processing, completed, failed
  records   PnLRecord[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pnl_uploads")
}

model PnLRecord {
  id           Int       @id @default(autoincrement())
  uploadId     Int
  upload       PnLUpload @relation(fields: [uploadId], references: [id], onDelete: Cascade)
  instrumentType String  // Equity - Intraday, Equity - Short Term, etc.
  symbol       String?
  isin         String?
  entryDate    DateTime?
  exitDate     DateTime?
  quantity     Float?
  buyValue     Float?
  sellValue    Float?
  profit       Float?
  periodOfHolding String?
  fairMarketValue Float?
  taxableProfit Float?
  turnover     Float?
  brokerage    Float?
  exchangeTransactionCharges Float?
  ipft         Float?
  sebiCharges  Float?
  cgst         Float?
  sgst         Float?
  igst         Float?
  stampDuty    Float?
  stt          Float?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("pnl_records")
}

model DividendUpload {
  id        Int      @id @default(autoincrement())
  accountId Int
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  fileName  String
  uploadDate DateTime @default(now())
  status    String   @default("processing") // processing, completed, failed
  records   DividendRecord[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("dividend_uploads")
}

model DividendRecord {
  id           Int       @id @default(autoincrement())
  uploadId     Int
  upload       DividendUpload @relation(fields: [uploadId], references: [id], onDelete: Cascade)
  symbol       String?
  isin         String?
  exDate       DateTime?
  quantity     Float?
  dividendPerShare Float?
  netDividendAmount Float?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([uploadId, symbol, isin, exDate, quantity, dividendPerShare, netDividendAmount], name: "unique_dividend_record")
  @@map("dividend_records")
}
